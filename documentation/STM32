# RM0038 Reference Manual STM32L

In addition to the standard Cortex-M debug hardware, ST has a DBG_MCU component with IDCODE and debug time clock control functionality
PPB Bus

MCU Device ID Code: MCU part number and revision.
Available even while MCU is under reset
DBGMCU_IDCODE:    0xe0042000
DBGMCU_IDCODE_L0: 0x40015800

DBGMCU_IDCODE[31:16] REV_ID
DBGMCU_IDCODE[15:12] RESERVED
DBGMCU_IDCODE[11:0]  DEV_ID

REV_ID decoding
REV_ID(15:0) Revision identifier
This field indicates the revision of the device:
Value        Cat.1 devices        Cat.2 devices       Cat.3 devices      Cat.4 / Cat.3 devices (1)    Cat.5 devices
0x1000:      Rev A                Rev A                                  Rev A                        Rev A
0x1008:      Rev Y                                                       Rev Z
0x1018:                           Rev Z               Rev A              Rev Y
0x1038:      Rev W                                    Rev X
0x1078:      Rev V

Bits 15:12 Reserved, must be kept at reset value.

Bits 11:0 DEV_ID(11:0): Device identifier
This field indicates the device ID.
0x416: Cat.1 device
0x429: Cat.2 device
0x427: Cat.3 device
0x436: Cat.4 device or Cat.3 device (1)
0x437: Cat.5 device

1. Cat.3 devices: STM32L15xxC or STM3216xxC devices with RPN ending with letter 'A', in WLCSP64 packages or with more then 100 pin.

texan/stlink: stlink-common.h

* target/stm32l.cfg: adapter_khz 300; stm32_enable_HSI; adapter_khz 2000
	proc stm32l_enable_HSI {} {
		# Enable HSI as clock source
		echo "STM32L: Enabling HSI"

		# Set HSION in RCC_CR
		mww 0x40023800 0x00000101

		# Set HSI as SYSCLK
		mww 0x40023808 0x00000001

		# Increase JTAG speed
		adapter_khz 2000
	}

	$_TARGETNAME configure -event reset-init {
		stm32l_enable_HSI
	}

	$_TARGETNAME configure -event reset-start {
		adapter_khz 300
	}

=

texan/stlink: stlink_load_device_params()
	core_id, chip_id, cpuid (0xE000ED00)
==
core_id is the DAP idcode

==
       uint32_t stlink_chip_id(stlink_t *sl) {
	       uint32_t chip_id = stlink_read_debug32(sl, 0xE0042000);
	       if (chip_id == 0) chip_id = stlink_read_debug32(sl, 0x40015800);	//Try Corex M0 DBGMCU_IDCODE register address
	       return chip_id;
       }

==
#define CM3_REG_CPUID 0xE000ED00 

void stlink_cpu_id(stlink_t *sl, cortex_m3_cpuid_t *cpuid) {
    uint32_t raw = stlink_read_debug32(sl, CM3_REG_CPUID);
    cpuid->implementer_id = (raw >> 24) & 0x7f;
    cpuid->variant = (raw >> 20) & 0xf;
    cpuid->part = (raw >> 4) & 0xfff;
    cpuid->revision = raw & 0xf;
    return;
}

==
	/* Fix chip_id for F4 rev A errata , Read CPU ID, as CoreID is the same for F2/F4*/
	if (sl->chip_id == 0x411) {
		uint32_t cpuid = stlink_read_debug32(sl, 0xE000ED00);
		if ((cpuid  & 0xfff0) == 0xc240)
			sl->chip_id = 0x413;
	}

==
texan/stlink uses 'chip_id' as the primary key for table lookup.

== DBGMCU Periperal Clock Control

Search for '__HAL_FREEZE_TIM2_DBGMCU'  in stm32f4xx_hal.h (STM32Cube)
